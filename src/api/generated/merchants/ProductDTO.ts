/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import * as t from "io-ts";
import { PatternString } from "@pagopa/ts-commons/lib/strings";
import { enumType } from "@pagopa/ts-commons/lib/types";
import { UTCISODateFromString } from "@pagopa/ts-commons/lib/dates";

export enum CategoryEnum {
  "Lavatrice" = "Lavatrice",

  "Lavasciuga" = "Lavasciuga",

  "Piano cottura" = "Piano cottura",

  "Frigorifero" = "Frigorifero",

  "Asciugatrice" = "Asciugatrice",

  "Lavastoviglie" = "Lavastoviglie",

  "Cappa da cucina" = "Cappa da cucina",

  "Forno" = "Forno"
}

export enum StatusEnum {
  "APPROVED" = "APPROVED",

  "REJECTED" = "REJECTED",

  "SUPERVISIONED" = "SUPERVISIONED"
}

// required attributes
const ProductDTOR = t.interface({});

// optional attributes
const ProductDTOO = t.partial({
  batchName: PatternString(
    "^(Frigoriferi|Cappe_Da_Cucina|Lavatrici|Lavastoviglie|Piani_Cottura|Forni|Lavasciuga|Asciugatrici)_[a-fA-F0-9]{24}\\.csv$"
  ),

  brand: PatternString("^.{1,100}$"),

  capacity: PatternString(".*"),

  category: enumType<CategoryEnum>(CategoryEnum, "category"),

  countryOfProduction: PatternString("^[A-Z]{2}$"),

  energyClass: PatternString("^(A\\+\\+\\+|A\\+\\+|A\\+|A|B|C|D|E|F|G)$"),

  eprelCode: PatternString("^\\d+$"),

  gtinCode: PatternString("^[a-zA-Z0-9]{1,14}$"),

  linkEprel: t.string,

  model: PatternString("^.{1,100}$"),

  motivation: PatternString(".*"),

  organizationId: PatternString(
    "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
  ),

  productCode: PatternString("^[a-zA-Z0-9 ]{0,100}$"),

  productGroup: PatternString(".*"),

  productName: PatternString(".*"),

  registrationDate: UTCISODateFromString,

  status: enumType<StatusEnum>(StatusEnum, "status")
});

export const ProductDTO = t.intersection(
  [ProductDTOR, ProductDTOO],
  "ProductDTO"
);

export type ProductDTO = t.TypeOf<typeof ProductDTO>;
