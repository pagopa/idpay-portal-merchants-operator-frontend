/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  GetPointOfSaleTransactionsT,
  getPointOfSaleTransactionsDefaultDecoder,
  GetPointOfSaleTransactionsProcessedT,
  getPointOfSaleTransactionsProcessedDefaultDecoder,
  GetProductsT,
  getProductsDefaultDecoder,
  AuthPaymentBarCodeT,
  authPaymentBarCodeDefaultDecoder,
  CapturePaymentT,
  capturePaymentDefaultDecoder,
  PreviewPaymentT,
  previewPaymentDefaultDecoder,
  DeleteTransactionT,
  deleteTransactionDefaultDecoder,
  GetPointOfSaleT,
  getPointOfSaleDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<GetPointOfSaleTransactionsT> &
  TypeofApiCall<GetPointOfSaleTransactionsProcessedT> &
  TypeofApiCall<GetProductsT> &
  TypeofApiCall<AuthPaymentBarCodeT> &
  TypeofApiCall<CapturePaymentT> &
  TypeofApiCall<PreviewPaymentT> &
  TypeofApiCall<DeleteTransactionT> &
  TypeofApiCall<GetPointOfSaleT>;

export type ParamKeys = keyof (TypeofApiParams<GetPointOfSaleTransactionsT> &
  TypeofApiParams<GetPointOfSaleTransactionsProcessedT> &
  TypeofApiParams<GetProductsT> &
  TypeofApiParams<AuthPaymentBarCodeT> &
  TypeofApiParams<CapturePaymentT> &
  TypeofApiParams<PreviewPaymentT> &
  TypeofApiParams<DeleteTransactionT> &
  TypeofApiParams<GetPointOfSaleT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<
  | GetPointOfSaleTransactionsT
  | GetPointOfSaleTransactionsProcessedT
  | GetProductsT
  | AuthPaymentBarCodeT
  | CapturePaymentT
  | PreviewPaymentT
  | DeleteTransactionT
  | GetPointOfSaleT,
  K
>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly getPointOfSaleTransactions: TypeofApiCall<
        GetPointOfSaleTransactionsT
      >;

      readonly getPointOfSaleTransactionsProcessed: TypeofApiCall<
        GetPointOfSaleTransactionsProcessedT
      >;

      readonly getProducts: TypeofApiCall<GetProductsT>;

      readonly authPaymentBarCode: TypeofApiCall<AuthPaymentBarCodeT>;

      readonly capturePayment: TypeofApiCall<CapturePaymentT>;

      readonly previewPayment: TypeofApiCall<PreviewPaymentT>;

      readonly deleteTransaction: TypeofApiCall<DeleteTransactionT>;

      readonly getPointOfSale: TypeofApiCall<GetPointOfSaleT>;
    }
  : {
      readonly getPointOfSaleTransactions: TypeofApiCall<
        ReplaceRequestParams<
          GetPointOfSaleTransactionsT,
          Omit<RequestParams<GetPointOfSaleTransactionsT>, K>
        >
      >;

      readonly getPointOfSaleTransactionsProcessed: TypeofApiCall<
        ReplaceRequestParams<
          GetPointOfSaleTransactionsProcessedT,
          Omit<RequestParams<GetPointOfSaleTransactionsProcessedT>, K>
        >
      >;

      readonly getProducts: TypeofApiCall<
        ReplaceRequestParams<GetProductsT, Omit<RequestParams<GetProductsT>, K>>
      >;

      readonly authPaymentBarCode: TypeofApiCall<
        ReplaceRequestParams<
          AuthPaymentBarCodeT,
          Omit<RequestParams<AuthPaymentBarCodeT>, K>
        >
      >;

      readonly capturePayment: TypeofApiCall<
        ReplaceRequestParams<
          CapturePaymentT,
          Omit<RequestParams<CapturePaymentT>, K>
        >
      >;

      readonly previewPayment: TypeofApiCall<
        ReplaceRequestParams<
          PreviewPaymentT,
          Omit<RequestParams<PreviewPaymentT>, K>
        >
      >;

      readonly deleteTransaction: TypeofApiCall<
        ReplaceRequestParams<
          DeleteTransactionT,
          Omit<RequestParams<DeleteTransactionT>, K>
        >
      >;

      readonly getPointOfSale: TypeofApiCall<
        ReplaceRequestParams<
          GetPointOfSaleT,
          Omit<RequestParams<GetPointOfSaleT>, K>
        >
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "/idpay-itn/merchant-op"
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const getPointOfSaleTransactionsT: ReplaceRequestParams<
    GetPointOfSaleTransactionsT,
    RequestParams<GetPointOfSaleTransactionsT>
  > = {
    method: "get",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer
    }),
    response_decoder: getPointOfSaleTransactionsDefaultDecoder(),
    url: ({
      ["initiativeId"]: initiativeId,
      ["pointOfSaleId"]: pointOfSaleId
    }) =>
      `${basePath}/initiatives/${initiativeId}/point-of-sales/${pointOfSaleId}/transactions`,

    query: ({
      ["page"]: page,
      ["size"]: size,
      ["sort"]: sort,
      ["fiscalCode"]: fiscalCode,
      ["status"]: status,
      ["productGtin"]: productGtin
    }) =>
      withoutUndefinedValues({
        ["page"]: page,
        ["size"]: size,
        ["sort"]: sort,
        ["fiscalCode"]: fiscalCode,
        ["status"]: status,
        ["productGtin"]: productGtin
      })
  };
  const getPointOfSaleTransactions: TypeofApiCall<GetPointOfSaleTransactionsT> = createFetchRequestForApi(
    getPointOfSaleTransactionsT,
    options
  );

  const getPointOfSaleTransactionsProcessedT: ReplaceRequestParams<
    GetPointOfSaleTransactionsProcessedT,
    RequestParams<GetPointOfSaleTransactionsProcessedT>
  > = {
    method: "get",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer
    }),
    response_decoder: getPointOfSaleTransactionsProcessedDefaultDecoder(),
    url: ({
      ["initiativeId"]: initiativeId,
      ["pointOfSaleId"]: pointOfSaleId
    }) =>
      `${basePath}/initiatives/${initiativeId}/point-of-sales/${pointOfSaleId}/transactions/processed`,

    query: ({
      ["page"]: page,
      ["size"]: size,
      ["sort"]: sort,
      ["fiscalCode"]: fiscalCode,
      ["status"]: status,
      ["productGtin"]: productGtin
    }) =>
      withoutUndefinedValues({
        ["page"]: page,
        ["size"]: size,
        ["sort"]: sort,
        ["fiscalCode"]: fiscalCode,
        ["status"]: status,
        ["productGtin"]: productGtin
      })
  };
  const getPointOfSaleTransactionsProcessed: TypeofApiCall<GetPointOfSaleTransactionsProcessedT> = createFetchRequestForApi(
    getPointOfSaleTransactionsProcessedT,
    options
  );

  const getProductsT: ReplaceRequestParams<
    GetProductsT,
    RequestParams<GetProductsT>
  > = {
    method: "get",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer
    }),
    response_decoder: getProductsDefaultDecoder(),
    url: ({}) => `${basePath}/products`,

    query: ({
      ["page"]: page,
      ["size"]: size,
      ["sort"]: sort,
      ["category"]: category,
      ["eprelCode"]: eprelCode,
      ["gtinCode"]: gtinCode,
      ["productFileId"]: productFileId,
      ["productName"]: productName,
      ["status"]: status,
      ["organizationId"]: organizationId
    }) =>
      withoutUndefinedValues({
        ["page"]: page,
        ["size"]: size,
        ["sort"]: sort,
        ["category"]: category,
        ["eprelCode"]: eprelCode,
        ["gtinCode"]: gtinCode,
        ["productFileId"]: productFileId,
        ["productName"]: productName,
        ["status"]: status,
        ["organizationId"]: organizationId
      })
  };
  const getProducts: TypeofApiCall<GetProductsT> = createFetchRequestForApi(
    getProductsT,
    options
  );

  const authPaymentBarCodeT: ReplaceRequestParams<
    AuthPaymentBarCodeT,
    RequestParams<AuthPaymentBarCodeT>
  > = {
    method: "put",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer,

      "Content-Type": "application/json"
    }),
    response_decoder: authPaymentBarCodeDefaultDecoder(),
    url: ({ ["trxCode"]: trxCode }) =>
      `${basePath}/transactions/bar-code/${trxCode}/authorize`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const authPaymentBarCode: TypeofApiCall<AuthPaymentBarCodeT> = createFetchRequestForApi(
    authPaymentBarCodeT,
    options
  );

  const capturePaymentT: ReplaceRequestParams<
    CapturePaymentT,
    RequestParams<CapturePaymentT>
  > = {
    method: "put",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer,

      "Content-Type": "application/json"
    }),
    response_decoder: capturePaymentDefaultDecoder(),
    url: ({ ["trxCode"]: trxCode }) =>
      `${basePath}/transactions/bar-code/${trxCode}/capture`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const capturePayment: TypeofApiCall<CapturePaymentT> = createFetchRequestForApi(
    capturePaymentT,
    options
  );

  const previewPaymentT: ReplaceRequestParams<
    PreviewPaymentT,
    RequestParams<PreviewPaymentT>
  > = {
    method: "put",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer,

      "Content-Type": "application/json"
    }),
    response_decoder: previewPaymentDefaultDecoder(),
    url: ({ ["trxCode"]: trxCode }) =>
      `${basePath}/transactions/bar-code/${trxCode}/preview`,

    body: ({ ["body"]: body }) =>
      body?.constructor?.name === "Readable" ||
      body?.constructor?.name === "ReadableStream"
        ? (body as ReadableStream)
        : body?.constructor?.name === "Buffer"
        ? (body as Buffer)
        : JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const previewPayment: TypeofApiCall<PreviewPaymentT> = createFetchRequestForApi(
    previewPaymentT,
    options
  );

  const deleteTransactionT: ReplaceRequestParams<
    DeleteTransactionT,
    RequestParams<DeleteTransactionT>
  > = {
    method: "delete",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteTransactionDefaultDecoder(),
    url: ({ ["transactionId"]: transactionId }) =>
      `${basePath}/transactions/${transactionId}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteTransaction: TypeofApiCall<DeleteTransactionT> = createFetchRequestForApi(
    deleteTransactionT,
    options
  );

  const getPointOfSaleT: ReplaceRequestParams<
    GetPointOfSaleT,
    RequestParams<GetPointOfSaleT>
  > = {
    method: "get",

    headers: ({ ["Bearer"]: Bearer }) => ({
      Authorization: Bearer
    }),
    response_decoder: getPointOfSaleDefaultDecoder(),
    url: ({ ["merchantId"]: merchantId, ["pointOfSaleId"]: pointOfSaleId }) =>
      `${basePath}/${merchantId}/point-of-sales/${pointOfSaleId}`,

    query: () => withoutUndefinedValues({})
  };
  const getPointOfSale: TypeofApiCall<GetPointOfSaleT> = createFetchRequestForApi(
    getPointOfSaleT,
    options
  );

  return {
    getPointOfSaleTransactions: (withDefaults || identity)(
      getPointOfSaleTransactions
    ),
    getPointOfSaleTransactionsProcessed: (withDefaults || identity)(
      getPointOfSaleTransactionsProcessed
    ),
    getProducts: (withDefaults || identity)(getProducts),
    authPaymentBarCode: (withDefaults || identity)(authPaymentBarCode),
    capturePayment: (withDefaults || identity)(capturePayment),
    previewPayment: (withDefaults || identity)(previewPayment),
    deleteTransaction: (withDefaults || identity)(deleteTransaction),
    getPointOfSale: (withDefaults || identity)(getPointOfSale)
  };
}
