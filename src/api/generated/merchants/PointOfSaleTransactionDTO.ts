/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import * as t from "io-ts";
import { PatternString } from "@pagopa/ts-commons/lib/strings";
import { enumType } from "@pagopa/ts-commons/lib/types";
import {
  IWithinRangeIntegerTag,
  WithinRangeInteger
} from "@pagopa/ts-commons/lib/numbers";
import { UTCISODateFromString } from "@pagopa/ts-commons/lib/dates";
import { NonNegativeNumber } from "@pagopa/ts-commons/lib/numbers";

export enum ChannelEnum {
  "BARCODE" = "BARCODE",

  "QRCODE" = "QRCODE",

  "IDPAYCODE" = "IDPAYCODE"
}

export enum StatusEnum {
  "CREATED" = "CREATED",

  "IDENTIFIED" = "IDENTIFIED",

  "AUTHORIZATION_REQUESTED" = "AUTHORIZATION_REQUESTED",

  "AUTHORIZED" = "AUTHORIZED",

  "REJECTED" = "REJECTED"
}

// additional attributes

export const PointOfSaleTransactionDTOAdditionalProperties = t.record(
  t.string,

  PatternString(".*"),

  "PointOfSaleTransactionDTOAdditionalProperties"
);

export type PointOfSaleTransactionDTOAdditionalProperties = t.TypeOf<
  typeof PointOfSaleTransactionDTOAdditionalProperties
>;

// required attributes
const PointOfSaleTransactionDTOR = t.interface({});

// optional attributes
const PointOfSaleTransactionDTOO = t.partial({
  additionalProperties: PointOfSaleTransactionDTOAdditionalProperties,

  channel: enumType<ChannelEnum>(ChannelEnum, "channel"),

  effectiveAmountCents: t.union([
    WithinRangeInteger<0, 1000000000, IWithinRangeIntegerTag<0, 1000000000>>(
      0,
      1000000000
    ),
    t.literal(1000000000)
  ]),

  fiscalCode: PatternString("^[A-Z0-9]+$"),

  id: PatternString(".*"),

  qrcodePngUrl: t.string,

  qrcodeTxtUrl: t.string,

  residualAmountCents: t.union([
    WithinRangeInteger<0, 1000000000, IWithinRangeIntegerTag<0, 1000000000>>(
      0,
      1000000000
    ),
    t.literal(1000000000)
  ]),

  rewardAmountCents: t.union([
    WithinRangeInteger<0, 1000000000, IWithinRangeIntegerTag<0, 1000000000>>(
      0,
      1000000000
    ),
    t.literal(1000000000)
  ]),

  splitPayment: t.boolean,

  status: enumType<StatusEnum>(StatusEnum, "status"),

  trxCode: PatternString("^[a-zA-Z0-9]+$"),

  trxDate: UTCISODateFromString,

  trxExpirationSeconds: NonNegativeNumber,

  updateDate: UTCISODateFromString
});

export const PointOfSaleTransactionDTO = t.intersection(
  [PointOfSaleTransactionDTOR, PointOfSaleTransactionDTOO],
  "PointOfSaleTransactionDTO"
);

export type PointOfSaleTransactionDTO = t.TypeOf<
  typeof PointOfSaleTransactionDTO
>;
